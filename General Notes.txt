What we need to do when there is an error (like stuffing error) ?
1) We should first do the clean up of the function, so this part can't be implemented in a separate function.
2) We should update error counters accordingly if needed.
3) We should set the next state function to be the error function.
4) We should notice that actions that need to be taken the very next bit, need special care, as their results
or actions should be ready at the beginning of the next bit. This fact leaves us only the time of the PHASE_SEG2
and here we even should design for its minimum time duration

If we say that it might be 4 time quanta to the next start of the bit (a.k.a SYNC_SEG), then the code that is
to be executed in this duration should be designed carefully.

The problem with this approach is :
a) This design is very compiler dependent, and the code produced by the compiler should be examined carefully.
apart from the function body equivalent assembly code generated by the compiler, the function call and context switching
may be a time consuming operations.

b) If some kind of assembly level programming\optimizing, this would destroy the code portability.

c) A work around is to limit the maximum bandwidth the controller might support even further, this will increase
the time available. However, This would affect the portability of the code : Chosen bandwidth should be examined on every
platform the ...

--------------------------
*1) When a receiver detects and error, the receiver error count will be increased by 1, except when the detected error was a bit error during the sending of an ACTIVE Eror Flag or and OVERLOAD Flag.

*2) When a RECEIVER detects a 'dominant' bit as the first bit after sending an ERROR FLAG the RECEIVER ERROR COUNT will be increased by 8.

*5) If a RECEIVER detects a BIT ERROR while sending an ACTIVE ERROR FLAG or an OVERLOAD GLAG the RECEIVE ERROR COUNT is increased by 8.

*6) Any node tolerates up to 7 consecutive 'dominant' bits after sending an ACTIVE ERROR FLAG, PASSIVE ERROR FLAG or OVERLOAD FLAG.
After detecting the 14th consecutive 'dominant' bit (in case of an ACTIVE ERROR FLAG or an OVERLOAD FLAG) or after detecting the 8th consecutive 'dominant' bit following a PASSIVE ERROR FLAG, and after each sequence of additional eight consecutive 'dominant' bits every Transmitter increases its TRANSMIT ERROR COUNT by 8, and every RECEIVER increases its RECEIVE ERROR COUNT by 8.

*8) After the successful reception of a message (reception without error up to the ACK SLOT and the successful sending of an ACK bit), the RECEIVE ERROR COUNT is decreased by 1, if it was between 1 and 127. if the RECEIVE ERROR COUNT was 0, it statys 0, and if it was greater the 127, then it will be set to a value between 119 and 127.

*9) A node is 'error passive' when the TRANSMIT ERROR COUNT equals or exceeds 128, or when the RECEIVE ERROR COUNT equals or exceeds 128. An error condition letting a node become 'error passive' causes the node to send an ACTIVE ERROR FLAG.

*11) An 'error passive' node becomes 'error active' again when TRANSMIT ERROR COUNT and RECEIVE ERROR COUNT are less than or equal to 127.

*12) A node which is 'bus off' is permitted to become 'error active' (no longer 'bus off') with its error counters both set to 0 after 128 occurence of 11 consecutive bits have been monitored on the bus.
